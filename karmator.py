#!usr/bin/python3
import datetime
import hashlib
import string
import os
import random
import requests
import json
import re

from flask import Flask, request

import telebot

from telebot import types
import config


TELEGRAM_API = os.environ["telegram_token"]
bot = telebot.TeleBot(TELEGRAM_API)

def is_my_message(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏, –∫–∞–∫–æ–º—É –±–æ—Ç—É –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ.
	–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã –Ω–µ —Ä–µ–∞–≥–∏—Ä–æ–≤–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –¥—Ä—É–≥–∏—Ö –±–æ—Ç–æ–≤.
	:param msg: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞.
	"""
	text = msg.text.split()[0].split("@")
	if len(text) > 1:
		if text[1] != config.bot_name:
			return False
	return True


@bot.message_handler(commands=["start"], func=is_my_message)
def start(msg):
	"""
	–§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ-–∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
	:param msg: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è-–∫–æ–º–∞–Ω–¥—ã
	"""


	reply_text = (
			"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ " +
			" –ø–æ–¥—Å—á–µ—Ç –∫–∞—Ä–º—ã –≤ —á–∞—Ç–µ @khvchat.")
	bot.send_message(msg.chat.id, reply_text)


			
def commands(msg, text):
	


	if '–±–æ—Ç ' in msg.text.lower() or ' –±–æ—Ç' in msg.text.lower() or '—Å–∫—É—á' in msg.text.lower():
		bot.send_chat_action(msg.chat.id, "typing")
		bot.reply_to(msg, f"{random.choice(config.bot_words)}", parse_mode="HTML")

	if '–±–æ—Ç —Ñ–∏–ª—å–º' in msg.text.lower() or ' –±–æ—Ç —Ñ–∏–ª—å–º' in msg.text.lower():
		bot.send_chat_action(msg.chat.id, "typing")
		bot.reply_to(msg, f"{random.choice(config.bot_film)}", parse_mode="HTML")

	if '!? ' in msg.text.lower():
		bot.send_chat_action(msg.chat.id, "typing")
		random_karma = ("–ê–±—Å–æ–ª—é—Ç–Ω–æ —Ç–æ—á–Ω–æ!","–î–∞.","–ù–µ—Ç.","–°–∫–æ—Ä–µ–µ –¥–∞, —á–µ–º –Ω–µ—Ç.","–ù–µ —É–≤–µ—Ä–µ–Ω...","–û–¥–Ω–æ–∑–Ω–∞—á–Ω–æ –Ω–µ—Ç!","–ï—Å–ª–∏ —Ç—ã –Ω–µ —Ñ–∞–Ω–∞—Ç –∞–Ω–∏–º–µ, —É —Ç–µ–±—è –≤—Å–µ –ø–æ–ª—É—á–∏—Ç—Å—è!","–ú–æ–∂–µ—à—å –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω –≤ —ç—Ç–æ–º.","–ü–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –Ω–µ –æ—á–µ–Ω—å —Ö–æ—Ä–æ—à–∏–µ.","–ê –∫–∞–∫ –∂–µ –∏–Ω–∞—á–µ?.","–î–∞, –Ω–æ –µ—Å–ª–∏ —Ç–æ–ª—å–∫–æ —Ç—ã –Ω–µ —Å–º–æ—Ç—Ä–∏—à—å –∞–Ω–∏–º–µ.","–ó–Ω–∞–∫–∏ –≥–æ–≤–æ—Ä—è—Ç - –¥–∞.","–ù–µ –∑–Ω–∞—é.","–ú–æ–π –æ—Ç–≤–µ—Ç - –Ω–µ—Ç.","–í–µ—Å—å–º–∞ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω–æ.","–ù–µ –º–æ–≥—É –¥–∞—Ç—å —Ç–æ—á–Ω—ã–π –æ—Ç–≤–µ—Ç.")
		random_karma2 = random.choice(random_karma)
		bot.reply_to(msg, f"üîÆ {random_karma2}", parse_mode="HTML")
	if '!v ' in msg.text.lower():
		result = msg.text.lower()
		result = result.replace(msg.text.split()[0], "")
		bot.send_poll(msg.chat.id, f'{result}‚ùì', ['–î–∞!', '–ù–µ—Ç.', '–ù–µ –∑–Ω–∞—é.'])
		
	if ' vs ' in msg.text.lower():
		bot.send_chat_action(msg.chat.id, "typing")
		random_karma = ("2Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –≤—Ç–æ—Ä–æ–µ","1Ô∏è‚É£ –û–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ –ø–µ—Ä–≤–æ–µ")
		random_karma2 = random.choice(random_karma)
		bot.reply_to(msg, f"üîÆ {random_karma2}", parse_mode="HTML")
		
	if 'love' in msg.text.lower():
		loves_text = "<a href='tg://user?id=55910350'>‚ù§</a>Ô∏è –í–∞—à–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç —Ä–∞–∑–º–µ—â–µ–Ω–æ –≤ –ó–Ω–∞–∫–æ–º—Å—Ç–≤–∞—Ö: @love_khv"
		bot.reply_to(msg, loves_text, parse_mode="HTML")
	
	if msg.text.lower() in ['—è–∑–∞–±–∞–Ω']:
		user = bot.get_chat_member(msg.chat.id, msg.reply_to_message.from_user.id)
		if user.status == 'administrator' or user.status == 'creator':
			return
		if msg.reply_to_message:
			bot.send_message(msg.chat.id, f"<a href='tg://user?id=55910350'>üî´</a> <b>{msg.from_user.first_name}</b> –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç –≤—ã–≥–Ω–∞—Ç—å <b>{msg.reply_to_message.from_user.first_name}</b> –∏–∑ –•–∞–±—á–∞—Ç–∞!", parse_mode="HTML")
			bot.send_poll(msg.chat.id, f'–°–æ–≥–ª–∞—Å–Ω—ã –≤—ã–≥–Ω–∞—Ç—å {msg.reply_to_message.from_user.first_name} –∏–∑ –ß–∞—Ç–∞?', ['–î–∞', '–ù–µ—Ç', '–ù–µ –∑–Ω–∞—é'],is_anonymous=False)
		else:
			return
	
	if msg.text.lower() in ['!k']:
		bot.delete_message(msg.chat.id, msg.message_id)
		user = bot.get_chat_member(msg.chat.id, msg.from_user.id)
		if user.status == 'creator':
			krasavchik(msg)

	if msg.text.lower() in ['—Ü–∏—Ç–∞—Ç–∞']:
		citata = random.choice(config.citata_words)
		bot.send_chat_action(msg.chat.id, "typing")
		bot.reply_to(msg, f"üìç –¶–∏—Ç–∞—Ç–∞: {citata}", parse_mode="HTML")
		
	if msg.text.lower() in ['–±–∏–ª–µ—Ç']:
		bot.send_chat_action(msg.chat.id, "typing")
		url = "https://api.travelpayouts.com/v1/prices/cheap"
		querystring = {"origin":"KHV","destination":"-","depart_date":"2021-01"}
		headers = {'x-access-token': '83a5fe66f97a36e6f0be4b2be21a5552'}
		response = requests.request("GET", url, headers=headers, params=querystring)
#		bot.reply_to(msg, f"üìç –¶–∏—Ç–∞—Ç–∞: {response.text}", parse_mode="HTML")
		data = response.json()
		a1 = data['data']['BKK']['1']['price']
		a2 = data['data']['AER']['1']['price']
		t2 = data['data']['AER']['1']['expires_at']
		bot.reply_to(msg, f"‚úàÔ∏è –ë–∞–Ω–≥–∫–æ–∫ (–¢–∞–∏–ª–∞–Ω–¥), —Ü–µ–Ω–∞: {a1}", parse_mode="HTML")
		bot.reply_to(msg, f"‚úàÔ∏è –°–æ—á–∏ (–ê–¥–ª–µ—Ä), —Ü–µ–Ω–∞: {a2}", parse_mode="HTML")
		keyboard = types.InlineKeyboardMarkup()
		url_button = types.InlineKeyboardButton(text="–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å", url="https://www.aviasales.ru/search/KHV"+t2+"AER1")
		keyboard.add(url_button)
		bot.send_message(msg.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –±–∏–ª–µ—Ç, –æ–ø–ª–∞—Ç–∏–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.", reply_markup=keyboard)
		
	if msg.text.lower() in ['–∫—É–ø–∏—Ç—å']:
		keyboard = types.InlineKeyboardMarkup()
		url_button = types.InlineKeyboardButton(text="üí∞ –ö—É–ø–∏—Ç—å –∫–∞—Ä–º—ã - 1—Ä.", url="https://khabara.ru/informer.html")
		keyboard.add(url_button)
		bot.send_message(msg.chat.id, "–í—ã –º–æ–∂–µ—Ç–µ –∫—É–ø–∏—Ç—å –∫–∞—Ä–º—É, –æ–ø–ª–∞—Ç–∏–≤ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ.", reply_markup=keyboard)
		
	if ' —á–∞—Ç ' in msg.text.lower():
		keyboard = types.InlineKeyboardMarkup()
		url_button1 = types.InlineKeyboardButton(text="TG", url="https://t.me/share/url?url=t.me/khvchat&text=–ü—Ä–∏–≤–µ—Ç! –ú—ã –æ–±—â–∞–µ–º—Å—è –≤ –ß–∞—Ç–µ –•–∞–±–∞—Ä–æ–≤—Å–∫–∞ –≤ Telegram, –∑–∞—Ö–æ–¥–∏ –∫ –Ω–∞–º: https://t.me/khvchat")
		url_button2 = types.InlineKeyboardButton(text="WA", url="https://api.whatsapp.com/send?text=–ü—Ä–∏–≤–µ—Ç! –ú—ã –æ–±—â–∞–µ–º—Å—è –≤ –ß–∞—Ç–µ –•–∞–±–∞—Ä–æ–≤—Å–∫–∞ –≤ Telegram, –∑–∞—Ö–æ–¥–∏ –∫ –Ω–∞–º: https://t.me/khvchat")
		url_button3 = types.InlineKeyboardButton(text="–í–ö", url="https://vk.com/share.php?url=https://t.me/khvchat&title=–ü—Ä–∏–≤–µ—Ç! –ú—ã –æ–±—â–∞–µ–º—Å—è –≤ –ß–∞—Ç–µ –•–∞–±–∞—Ä–æ–≤—Å–∫–∞ –≤ Telegram, –∑–∞—Ö–æ–¥–∏ –∫ –Ω–∞–º: https://t.me/khvchat")
		
		url_button4 = types.InlineKeyboardButton(text="–û–ö", url="https://connect.ok.ru/offer?url=https://t.me/khvchat&title=–ü—Ä–∏–≤–µ—Ç! –ú—ã –æ–±—â–∞–µ–º—Å—è –≤ –ß–∞—Ç–µ –•–∞–±–∞—Ä–æ–≤—Å–∫–∞ –≤ Telegram, –∑–∞—Ö–æ–¥–∏ –∫ –Ω–∞–º: https://t.me/khvchat")
		
		keyboard.row(url_button1, url_button2, url_button3, url_button4)
		bot.send_message(msg.chat.id, "üí¨ –ü—Ä–∏–≥–ª–∞—Å–∏ –≤ –•–∞–±–ß–∞—Ç –¥—Ä—É–∑–µ–π –∏–∑ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–æ–≤:", reply_markup=keyboard)
		
		
	if msg.text.lower() in ['—É—Ç—Ä–∞']:
		bot.send_chat_action(msg.chat.id, "typing")
		citata = random.choice(config.citata_words)
		bot.reply_to(msg, f"–° –¥–æ–±—Ä—ã–º —É—Ç—Ä–æ–º, –•–∞–±–∞—Ä–æ–≤—Å–∫! ‚òÄÔ∏è –í–∞–º –æ—Ç–ª–∏—á–Ω–æ–≥–æ –∏ –ø–æ–∑–∏—Ç–∏–≤–Ω–æ–≥–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è!!!", parse_mode="HTML")

	if msg.text.lower() in ['–ø—Ä–µ–≤–µ–¥']:
		if msg.reply_to_message:
			bot.send_chat_action(msg.chat.id, "typing")
			bot.reply_to(msg.reply_to_message,f"‚úå–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º —Ç–µ–±—è –≤ <b>–•–∞–±–ß–∞—Ç–µ</b>! –ü–æ –¥–æ–±—Ä–æ–π —Ç—Ä–∞–¥–∏—Ü–∏–∏, –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å—Å—è –∏ —Ä–∞—Å—Å–∫–∞–∑–∞—Ç—å –Ω–µ–º–Ω–æ–≥–æ –æ —Å–µ–±–µ.", parse_mode="HTML")
		else:
			return
	if msg.text.lower() in ['—Å–æ—Ö—Ä–∞–Ω–∏—Ç—å'] or msg.text.lower() in ['save']:
		if msg.reply_to_message:
			bot.send_chat_action(msg.chat.id, "typing")
			bot.forward_message(-1001338159710, msg.chat.id, msg.reply_to_message.message_id)
			bot.reply_to(msg.reply_to_message,f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ <a href='https://t.me/joinchat/T8KyXgxSk1o4s7Hk'>–¶–∏—Ç–∞—Ç–Ω–∏–∫ –•–∞–±–ß–∞—Ç–∞</a>.", parse_mode="HTML")
		else:
			return
	if msg.text.lower() in ['—Ñ–æ—Ç–æ']:
		if msg.reply_to_message:
			bot.send_chat_action(msg.chat.id, "typing")
			bot.reply_to(msg.reply_to_message,f"–ù–µ —Å–æ–±–ª–∞–≥–æ–≤–æ–ª–∏—Ç–µ –ª–∏ –≤—ã —Å–∫–∏–Ω—É—Ç—å –≤ —á–∞—Ç —Å–≤–æ—é —Ñ–æ—Ç–æ—á–∫—É, –Ω–∞–º –±—É–¥–µ—Ç –æ—á–µ–Ω—å –ø—Ä–∏—è—Ç–Ω–æ –≤–∞—Å –ª–∏—Ü–µ–∑—Ä–µ—Ç—å üôÇ", parse_mode="HTML")
		else:
			return
	if msg.text.lower() in ['—Ñ—Å–±']:
		if msg.reply_to_message:
			bot.send_chat_action(msg.chat.id, "typing")
			bot.reply_to(msg.reply_to_message,f"<a href='https://telegra.ph/file/1a296399c86ac7a19777f.jpg'>üòé</a> –ó–∞ –≤–∞–º–∏ —É–∂–µ –≤—ã–µ—Ö–∞–ª–∏!", parse_mode="HTML")
		else:
			return
	if msg.text.lower() in ['–≤–æ–π—Å']:
		if msg.reply_to_message:
			bot.reply_to(msg.reply_to_message,f"üîîüîîüîîüîîüîîüîîüîî\nüó£–ì–æ –≤ –í–æ–π—Å –ß–∞—Ç!üëÇ\
\nüîîüîîüîîüîîüîîüîîüîî", parse_mode="HTML")
		else:
			bot.send_message(msg.chat.id, f"üîîüîîüîîüîîüîîüîîüîî\nüó£–ì–æ –≤ –í–æ–π—Å –ß–∞—Ç!üëÇ\
\nüîîüîîüîîüîîüîîüîîüîî", parse_mode="HTML")

	if '!–∫ ' in msg.text.lower():
		
		result = msg.text.split()[1].lower()
		bot.send_message(msg.chat.id,f'üêä {msg.from_user.first_name} –∑–∞–≥–∞–¥–∞–ª(–∞) —Å–≤–æ–µ —Å–ª–æ–≤–æ.', parse_mode="HTML")
		saves_database[database] = result
		bot.send_message(-1001110839896,f'üêä {msg.from_user.first_name} –∑–∞–≥–∞–¥–∞–ª(–∞) —Å–≤–æ–µ —Å–ª–æ–≤–æ.', parse_mode="HTML")
#		bot.forward_message(-1001110839896, msg.message_id)
		bot.delete_message(msg.chat.id, msg.message_id)

	if msg.text.lower() in ['–∫—Ä–æ–∫–æ–¥–∏–ª'] or msg.text.lower() in ['/croco@khabara_bot']:
		saves_database_id[database_id] =f"{msg.from_user.id}"
		saves_database[database] = random.choice(config.kroko_words)
		bot.send_chat_action(msg.chat.id, "typing")
		markup = telebot.types.InlineKeyboardMarkup()
		button = telebot.types.InlineKeyboardButton(text='–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ª–æ–≤–æ', callback_data=msg.from_user.id)
		button2 = telebot.types.InlineKeyboardButton(text='–°–º–µ–Ω–∏—Ç—å —Å–ª–æ–≤–æ', callback_data=msg.from_user.first_name)
		markup.add(button,button2)
		bot.send_message(chat_id=msg.chat.id, text=f'üêä {msg.from_user.first_name} –∑–∞–≥–∞–¥–∞–ª(–∞) —Å–ª–æ–≤–æ.', reply_markup=markup)
	seves = saves_database.get(database)
	seves_id = saves_database_id.get(database_id)

	if re.search(r'[–∞-—è–ê-–Ø—ë–Å]',msg.text.split()[0].lower()) and re.search(r'[A-Za-z]',msg.text.split()[0].lower()):
		bot.reply_to(msg,f"–ü–æ–ø—ã—Ç–∞–ª—Å—è –æ–±–æ–π—Ç–∏ —Å–∏—Å—Ç–µ–º—É üóø", parse_mode="HTML")
	if msg.text.lower() == seves:
		if seves_id ==  f"{msg.from_user.id}":
					bot.send_chat_action(msg.chat.id, "typing")
					bot.reply_to(msg,f"–ú—É—Ö–ª–µ–≤–∞—Ç—å –Ω–µ –∫—Ä–∞—Å–∏–≤–æ: -10 –∫–∞—Ä–º—ã üí©", parse_mode="HTML")
					change_karma(msg.from_user, msg.chat, -10)
					
		else:
			bot.send_chat_action(msg.chat.id, "typing")
			bot.reply_to(msg,f"üéâ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: <b>{seves}</b> +3 –∫–∞—Ä–º—ã, –∑–∞–ø—É—Å—Ç–∏—Ç—å –∏–≥—Ä—É /croco", parse_mode="HTML")
			change_karma(msg.from_user, msg.chat, 3)
			saves_database[database] = "dse4f"



def reply_exist(msg):
	return msg.reply_to_message


@bot.message_handler(content_types=["text"], func=reply_exist)
def changing_karma_text(msg):

	commands(msg, msg.text)
	

	
@bot.message_handler(content_types=['text'])	
def karma_game(msg):

	commands(msg, msg.text)

				
				



# –î–∞–ª—å–Ω–µ–π—à–∏–π –∫–æ–¥ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è –≤–µ–±—Ö—É–∫–æ–≤
server = Flask(__name__)


@server.route("/bot", methods=['POST'])
def get_message():
	""" TODO """
	decode_json = request.stream.read().decode("utf-8")
	bot.process_new_updates([telebot.types.Update.de_json(decode_json)])
	return "!", 200


@server.route("/")
def webhook_add():
	""" TODO """
	bot.remove_webhook()
	bot.set_webhook(url=config.url)
	return "!", 200

@server.route("/<password>")
def webhook_rem(password):
	""" TODO """
	password_hash = hashlib.md5(bytes(password, encoding="utf-8")).hexdigest()
	if password_hash == "5b4ae01462b2930e129e31636e2fdb68":
		bot.remove_webhook()
		return "Webhook removed", 200
	else:
		return "Invalid password", 200


server.run(host="0.0.0.0", port=int(os.environ.get('PORT', 5000)))
